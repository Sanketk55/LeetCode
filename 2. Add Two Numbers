2. Add Two Numbers

You are given two non-empty linked lists representing two non-negative integers. The digits are stored in reverse order, and each of their nodes contains a single digit. Add the two numbers and return the sum as a linked list.

You may assume the two numbers do not contain any leading zero, except the number 0 itself.

Example 1:

Input: l1 = [2,4,3], l2 = [5,6,4]
Output: [7,0,8]
Explanation: 342 + 465 = 807.


Example 2:

Input: l1 = [0], l2 = [0]
Output: [0]


Example 3:

Input: l1 = [9,9,9,9,9,9,9], l2 = [9,9,9,9]
Output: [8,9,9,9,0,0,0,1]
 

Constraints:

The number of nodes in each linked list is in the range [1, 100].
0 <= Node.val <= 9
It is guaranteed that the list represents a number that does not have leading zeros.

/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    // ListNode* reverse(ListNode* node){
    //     ListNode* prev = nullptr;
    //     ListNode* cur = node;
    //     ListNode* cur_next;
        
    //     while(cur){
    //         cur_next = cur->next;
    //         cur->next = prev;
    //         prev = cur;
    //         cur = cur_next;
    //     }
    //     return prev;
    // }
    // ListNode* trimZeros(ListNode* node){
    //     while(node && node->data ==0) node = node->next;
    //     return node;
    // }
    ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) {
        if(!l1 && !l2) return new ListNode(0);
        if(!l1) return l2;
        if(!l2) return l1;

        ListNode* node1 = l1;
        ListNode* node2 = l2;

        ListNode* head = new ListNode(-1);
        ListNode* tail = head;
        int rem = 0;

        while(node1 || node2 || rem){
            int num1 = node1 == nullptr ? 0 : node1->val;
            int num2 = node2 == nullptr ? 0 : node2->val;

            int sum = num1 + num2 + rem;
            rem = sum/10;
            tail->next = new ListNode(sum%10);
            tail = tail->next;

            if(node1) node1 = node1->next;
            if(node2) node2 = node2->next;

        }
        return head->next;

    }
};
