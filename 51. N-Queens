The n-queens puzzle is the problem of placing n queens on an n x n chessboard such that no two queens attack each other.

Given an integer n, return all distinct solutions to the n-queens puzzle. You may return the answer in any order.

Each solution contains a distinct board configuration of the n-queens' placement, where 'Q' and '.' both indicate a queen and an empty space, respectively.


Example 1:


Input: n = 4
Output: [[".Q..","...Q","Q...","..Q."],["..Q.","Q...","...Q",".Q.."]]
Explanation: There exist two distinct solutions to the 4-queens puzzle as shown above


Example 2:

Input: n = 1
Output: [["Q"]]
 

Constraints:

1 <= n <= 9


class Solution {
private:
    bool isSafe(int row, int col, int n, vector<string> board){
        int tRow = row;
        int tCol = col;

        while(col>=0){
            if(board[row][col]=='Q') return false;
            col--;
        }
        col = tCol;
        while(row>=0 && col>=0){
            if(board[row][col]=='Q') return false;
            col--;
            row--;
        }
        while(tRow<n && tCol>=0){
            if(board[tRow][tCol]=='Q') return false;
            tCol--;
            tRow++;
        }
        return true;
    }
    void recursion(int col, int n, vector<string> &board, vector<vector<string>> &ans){
        if(col==n){
            ans.push_back(board);
            return ;
        }
        for(int row=0;row<n;row++){
            if(isSafe(row, col, n, board)){
                board[row][col] = 'Q';
                recursion(col+1, n, board, ans);
                board[row][col] = '.';
            }
        }
    }
public:
    vector<vector<string>> solveNQueens(int n) {
        vector<string> board(n);
        vector<vector<string>> ans;
        string s(n,'.');
        for(int i=0;i<n;i++){
            board[i] = s;
        }
        recursion(0, n, board, ans);
        return ans;
    }
};
