Given an m x n binary matrix mat, return the distance of the nearest 0 for each cell.

The distance between two adjacent cells is 1.

Example 1:
Input: mat = [[0,0,0],[0,1,0],[0,0,0]]
Output: [[0,0,0],[0,1,0],[0,0,0]]

Example 2:
Input: mat = [[0,0,0],[0,1,0],[1,1,1]]
Output: [[0,0,0],[0,1,0],[1,2,1]]
 
Constraints:

m == mat.length
n == mat[i].length
1 <= m, n <= 104
1 <= m * n <= 104
mat[i][j] is either 0 or 1.
There is at least one 0 in mat.

SOLUTION:
class Solution {
public:
    vector<vector<int>> updateMatrix(vector<vector<int>>& mat) {
        int n=mat.size();
	    int m=mat[0].size();
	    
	    vector<vector<int>>visited(n,vector<int>(m,0));
	    vector<vector<int>>distance(n,vector<int>(m,0));
	    
	    int dx[]={0,0,1,-1};
	    int dy[]={1,-1,0,0};
	    queue<pair<pair<int,int>,int>>q;
	    
	    for(int i=0;i<n;i++){
	        for(int j=0;j<m;j++){
	            if(mat[i][j]==0){
	                visited[i][j]=1;
	                q.push({{i,j},0});
	            }
	        }
	    }
	    
	    while(!q.empty()){
	        int row=q.front().first.first;
	        int col=q.front().first.second;
	        int dist=q.front().second;
	        
	        distance[row][col]=dist;
	        
	        q.pop();
	        
	        for(int i=0;i<4;i++){
	            int nrow=row+dx[i];
	            int ncol=col+dy[i];
	            
	            if(nrow>=0 && ncol>=0 && nrow<n && ncol<m && !visited[nrow][ncol]){
	                visited[nrow][ncol]=1;
	                q.push({{nrow,ncol},dist+1});
	            }
	        }
	    }
	    return distance;
    }
};
