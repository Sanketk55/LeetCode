
Given a m x n grid filled with non-negative numbers, find a path from top left to bottom right, which minimizes the sum of all numbers along its path.

Note: You can only move either down or right at any point in time.

Example 1:

Input: grid = [[1,3,1],[1,5,1],[4,2,1]]
Output: 7
Explanation: Because the path 1 → 3 → 1 → 1 → 1 minimizes the sum.

Example 2:

Input: grid = [[1,2,3],[4,5,6]]
Output: 12

Constraints:

m == grid.length
n == grid[i].length
1 <= m, n <= 200
0 <= grid[i][j] <= 200


class Solution {
public:
    int recursion(int i, int j, vector<vector<int>> &matrix, vector<vector<int>> &dp) {
        if (i == 0 && j == 0)
            return matrix[0][0]; 
        if (i < 0 || j < 0)
            return INT_MAX/2; 
        if (dp[i][j] != -1)
            return dp[i][j]; 

        int up = matrix[i][j] + recursion(i - 1, j, matrix, dp);
        int left = matrix[i][j] + recursion(i, j - 1, matrix, dp);

        return dp[i][j] = min(up, left);
    }
    int minPathSum(vector<vector<int>>& grid) {
        int n = grid.size();
        int m = grid[0].size();
        vector<vector<int>> dp(n, vector<int>(m, -1)); 
        // return recursion(n - 1, m - 1, grid, dp);

        for(int row = 0 ; row < n ; row++){
            for(int col = 0; col < m ;col++){
                if(row == 0 && col == 0) dp[row][col] = grid[row][col];
                else{
                    int down = INT_MAX/2, right = INT_MAX/2;
                    if(row > 0) down = grid[row][col] + dp[row-1][col];
                    if(col > 0) right = grid[row][col] + dp[row][col-1];

                    dp[row][col] = min(down, right);
                }
            }
        }
        return dp[n-1][m-1];
    }
};
