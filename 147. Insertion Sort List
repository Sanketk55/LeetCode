Given the head of a singly linked list, sort the list using insertion sort, and return the sorted list's head.

The steps of the insertion sort algorithm:

i] Insertion sort iterates, consuming one input element each repetition and growing a sorted output list.
ii] At each iteration, insertion sort removes one element from the input data, finds the location it belongs within the sorted list and inserts it there.
iii] It repeats until no input elements remain.

Example 1:

Input: head = [4,2,1,3]
Output: [1,2,3,4]

Example 2:

Input: head = [-1,5,3,4,0]
Output: [-1,0,3,4,5]
 

Constraints:

The number of nodes in the list is in the range [1, 5000].
-5000 <= Node.val <= 5000


/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    ListNode* insertionSortList(ListNode* head) {
        ListNode* node=head;
        while(node){
            ListNode* ptr=head;
            while(ptr!=node){
                if(node->val <= ptr->val){
                    swap(node->val,ptr->val);
                }
                ptr=ptr->next;
            }
            node=node->next;
        }
        return head;
    }
};
