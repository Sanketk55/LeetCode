Given the root of a binary search tree, return a balanced binary search tree with the same node values. If there is more than one answer, return any of them.

A binary search tree is balanced if the depth of the two subtrees of every node never differs by more than 1.

Example 1:

Input: root = [1,null,2,null,3,null,4,null,null]
Output: [2,1,3,null,null,null,4]
Explanation: This is not the only correct answer, [3,1,4,null,2] is also correct.


Example 2:

Input: root = [2,1,3]
Output: [2,1,3]
 

Constraints:

The number of nodes in the tree is in the range [1, 104].
1 <= Node.val <= 105


/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
private:
    void inorder(TreeNode* node, vector<int> &ds){
        if(!node) return;

        inorder(node->left, ds);
        ds.push_back(node->val);
        inorder(node->right, ds);
    }

    TreeNode* makeBalanceBST(vector<int>ds, int low, int high){
        if(low > high) return nullptr;

        int mid = low + (high - low)/2;
        TreeNode* cur = new TreeNode(ds[mid]);
        cur->left = makeBalanceBST(ds, low, mid-1);
        cur->right = makeBalanceBST(ds, mid+1, high);
        return cur;

    }
public:
    TreeNode* balanceBST(TreeNode* root) {
        if(!root) return nullptr;
        vector<int>ds;
        inorder(root, ds);
        return makeBalanceBST(ds, 0, ds.size()-1);
    }
};
