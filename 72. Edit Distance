
Given two strings word1 and word2, return the minimum number of operations required to convert word1 to word2.

You have the following three operations permitted on a word:

Insert a character
Delete a character
Replace a character
 

Example 1:

Input: word1 = "horse", word2 = "ros"
Output: 3
Explanation: 
horse -> rorse (replace 'h' with 'r')
rorse -> rose (remove 'r')
rose -> ros (remove 'e')


Example 2:

Input: word1 = "intention", word2 = "execution"
Output: 5
Explanation: 
intention -> inention (remove 't')
inention -> enention (replace 'i' with 'e')
enention -> exention (replace 'n' with 'x')
exention -> exection (replace 'n' with 'c')
exection -> execution (insert 'u')
 

Constraints:

0 <= word1.length, word2.length <= 500
word1 and word2 consist of lowercase English letters.


class Solution {
public:
    int helper(string s1, string s2, int i, int j, vector<vector<int>> &dp){
        // if(i == 0 && j==0 && s1[0] == s2[0]) return 0;
        if(i < 0) return j+1;
        if(j < 0) return i+1;
        
        if(dp[i][j] != -1) return dp[i][j];
        if(s1[i] == s2[j]) return 0 + helper(s1, s2, i-1, j-1, dp);
        
        int ins = 1 + helper(s1, s2, i, j-1, dp);
        int rem = 1 + helper(s1, s2, i-1, j, dp);
        int swp = 1 + helper(s1, s2, i-1, j-1, dp);
        return dp[i][j] = min({ins, rem, swp});
    }
    int minDistance(string word1, string word2) {
        int len1 = word1.length();
        int len2 = word2.length();
        
        vector<vector<int>> dp(len1, vector<int>(len2, -1));
        return helper(word1, word2, len1-1, len2-1, dp);
    }
};
