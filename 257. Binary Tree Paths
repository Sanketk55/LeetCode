Given the root of a binary tree, return all root-to-leaf paths in any order.

A leaf is a node with no children.


Example 1:


Input: root = [1,2,3,null,5]
Output: ["1->2->5","1->3"]
Example 2:

Input: root = [1]
Output: ["1"]
 

Constraints:

The number of nodes in the tree is in the range [1, 100].
-100 <= Node.val <= 100


/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    void preorder(vector<string>&v, string s,TreeNode* root){
        
        if(!root)return;
        
        s+=to_string(root->val);
        s+="->";
        
        if(!root->left && !root->right){
            s.pop_back();
            s.pop_back();
            v.push_back(s);     
        }
        
        preorder(v,s,root->left);
        preorder(v,s,root->right);
    }
    
    
    vector<string> binaryTreePaths(TreeNode* root) {
        
        vector<string>v;
        string s="";
        preorder(v,s,root);
        return v;   
    }
};
